#region Copyright
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Variable.cs" company="Ian Horswill">
// Copyright (C) 2017 Ian Horswill
//  
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in the
// Software without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so, subject to the
// following conditions:
//  
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace BotL.Compiler
{
    /// <summary>
    /// Compiler-internal representation of a variable within transformed source code
    /// </summary>
    class Variable
    {
        /// <summary>
        /// Print name of the variable.
        /// Names need not be unique, even within a given rule.
        /// </summary>
        public readonly Symbol Name;
        /// <summary>
        /// True if this is a name generated during macro expansion or some other compiler transform.
        /// This is just used to suppress the printing of compiler-generated variables in the report-back
        /// from queries in the REPL.
        /// </summary>
        public readonly bool IsGenerated;

        /// <summary>
        /// Make a variable with the specified name and tag it as being generated by the compiler rather than
        /// coming from source code.
        /// </summary>
        /// <param name="name">Print name to give to the variable.  This name need not be unique.</param>
        /// <returns>The variable object.</returns>
        public static Variable MakeGenerated(string name)
        {
            return MakeGenerated(Symbol.Intern(name));
        }

        /// <summary>
        /// Make a variable with the specified name and tag it as being generated by the compiler rather than
        /// coming from source code.
        /// </summary>
        /// <param name="name">Print name to give to the variable.  This name need not be unique.</param>
        /// <returns>The variable object.</returns>
        private static Variable MakeGenerated(Symbol name)
        {
            return new Variable(name, true);
        }

        /// <summary>
        /// Make a new variable.
        /// This is the compile-time representation of the variable.  It is never seen by the VM.
        /// </summary>
        /// <param name="name">The print name of the variable.  This is not required to be unique; 
        /// if you make two variable objects with the same name,
        ///  the compiler will treat them as different variables.</param>
        /// <param name="generated">Whether this should be labeled as a compiler-generated variable.
        /// Generated variables are not printed by the REPL after a query.  Otherwise this field
        /// is meaningless.</param>
        internal Variable(Symbol name, bool generated=false)
        {
            Name = name;
            IsGenerated = generated;
        }

        public override string ToString()
        {
            return Name.Name;
        }
    }
}
